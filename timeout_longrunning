pipeline {
    agent any
    stages {
        stage('Long Running Job') {
            steps {
                // Set a timeout of 30 minutes
                timeout(time: 30, unit: 'MINUTES') {
                    script {
                        // Your long-running job commands here
                        sh 'run-your-long-job-command'
                    }
                }
            }
        }
    }
}
----------------------------
pipeline {
    agent any
    stages {
        stage('Long Running Job') {
            steps {
                timeout(time: 30, unit: 'MINUTES') {
                    script {
                        try {
                            sh 'run-your-long-job-command'
                        } catch (Exception e) {
                            // Handle the exception
                            echo "Job failed due to timeout or error."
                            currentBuild.result = 'FAILURE'
                            // Notify or perform other actions here
                        }
                    }
                }
            }
        }
    }
}
----------------------------------------------



pipeline {
    agent any
    stages {
        stage('Handle Exceptions') {
            steps {
                script {
                    timeout(time: 30, unit: 'SECONDS') {
                        try {
                            // Simulating a long-running job that might throw an exception
                            int result = divideNumbers(10, 0) // This will throw an ArithmeticException
                            echo "Result: ${result}"
                        } catch (ArithmeticException e) {
                            echo "Caught an ArithmeticException: ${e.message}"
                        } catch (NullPointerException e) {
                            echo "Caught a NullPointerException: ${e.message}"
                        } catch (hudson.AbortException e) {
                            // Handle the timeout exception specifically
                            echo "Caught a TimeoutException: Job took too long to complete."
                        } catch (Exception e) {
                            echo "Caught a general Exception: ${e.message}"
                        } finally {
                            echo "Execution completed. Cleaning up resources."
                        }
                    }
                }
            }
        }
    }
}

// A method to demonstrate throwing exceptions
def divideNumbers(int a, int b) {
    return a / b // This will throw ArithmeticException if b is 0
}
